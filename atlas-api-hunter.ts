/**
 * üîç ATLAS API Hunter v1
 * Objetivo: Detectar, filtrar y almacenar APIs p√∫blicas √∫tiles sin intervenci√≥n humana
 * Basado en el protocolo proporcionado por Geremy
 */

import axios from 'axios';
import fs from 'fs';

interface ApiEntry {
  API: string;
  Description: string;
  Auth: string;
  HTTPS: boolean;
  Cors: string;
  Link: string;
  Category: string;
}

interface ApiUtil {
  Nombre: string;
  Descripci√≥n: string;
  URL: string;
  Categor√≠a: string;
  Cors: string;
  Testeable: boolean;
}

export class AtlasApiHunter {
  private static instance: AtlasApiHunter;
  private FUENTE_APIS = "https://api.publicapis.org/entries";
  private huntingActive = false;
  private discoveredApis: ApiUtil[] = [];
  private lastHunt = new Date();

  private constructor() {}

  static getInstance(): AtlasApiHunter {
    if (!AtlasApiHunter.instance) {
      AtlasApiHunter.instance = new AtlasApiHunter();
    }
    return AtlasApiHunter.instance;
  }

  // üß† Filtro de APIs √∫tiles (sin auth, con HTTPS, categor√≠a relevante)
  private filtrarApis(data: { entries: ApiEntry[] }): ApiUtil[] {
    const apisUtiles: ApiUtil[] = [];
    const categoriasRelevantes = [
      "Weather", "Finance", "Health", "Open Data", "Machine Learning",
      "News", "Cryptocurrency", "Government", "Sports", "Science & Math",
      "Transportation", "Business", "Social", "Technology"
    ];

    for (const api of data.entries || []) {
      // Priorizar APIs sin autenticaci√≥n y con HTTPS
      if ((api.Auth === "" || api.Auth === "No") && 
          api.HTTPS && 
          categoriasRelevantes.includes(api.Category)) {
        apisUtiles.push({
          Nombre: api.API,
          Descripci√≥n: api.Description,
          URL: api.Link,
          Categor√≠a: api.Category,
          Cors: api.Cors,
          Testeable: true
        });
      }
    }
    
    return apisUtiles;
  }

  // üîÅ Descubrimiento aut√≥nomo de APIs
  async descubrirApis(): Promise<{ success: boolean; apis: ApiUtil[]; error?: string }> {
    try {
      console.log('üîç ATLAS API Hunter: Iniciando descubrimiento aut√≥nomo...');
      
      const response = await axios.get(this.FUENTE_APIS, { timeout: 10000 });
      const apis = this.filtrarApis(response.data);
      
      // Guardar APIs descubiertas
      this.discoveredApis = apis;
      this.lastHunt = new Date();
      
      // Guardar en archivo para persistencia
      const apisData = {
        timestamp: this.lastHunt.toISOString(),
        total_discovered: apis.length,
        apis: apis
      };
      
      fs.writeFileSync('atlas_apis.json', JSON.stringify(apisData, null, 2));
      
      console.log(`‚úÖ ${apis.length} APIs √∫tiles guardadas en atlas_apis.json`);
      
      return { success: true, apis };
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Error desconocido';
      console.log(`‚ùå Error al obtener APIs: ${errorMessage}`);
      return { success: false, apis: [], error: errorMessage };
    }
  }

  // üß™ Testear APIs para verificar que funcionan
  async testearApis(apis: ApiUtil[]): Promise<ApiUtil[]> {
    const apisTesteadas: ApiUtil[] = [];
    
    for (const api of apis.slice(0, 10)) { // Testear m√°ximo 10 para no saturar
      try {
        const response = await axios.get(api.URL, { 
          timeout: 5000,
          headers: { 'User-Agent': 'ATLAS-API-Hunter/1.0' }
        });
        
        if (response.status === 200) {
          api.Testeable = true;
          apisTesteadas.push(api);
          console.log(`‚úÖ API funcionando: ${api.Nombre}`);
        }
      } catch (error) {
        console.log(`‚ùå API no responde: ${api.Nombre}`);
        api.Testeable = false;
      }
    }
    
    return apisTesteadas;
  }

  // üéØ Seleccionar las 5 APIs m√°s virales para monetizaci√≥n
  seleccionarApisMasVirales(): ApiUtil[] {
    const categoriasVirales = ['Finance', 'Cryptocurrency', 'News', 'Weather', 'Health'];
    
    return this.discoveredApis
      .filter(api => categoriasVirales.includes(api.Categor√≠a) && api.Testeable)
      .sort((a, b) => {
        // Priorizar por categor√≠a viral
        const scoreA = categoriasVirales.indexOf(a.Categor√≠a);
        const scoreB = categoriasVirales.indexOf(b.Categor√≠a);
        return scoreA - scoreB;
      })
      .slice(0, 5);
  }

  // üöÄ Convertir APIs en artefactos vendibles
  async generarArtefactosVendibles(): Promise<any[]> {
    const apisVirales = this.seleccionarApisMasVirales();
    const artefactos = [];

    for (const api of apisVirales) {
      const artefacto = {
        nombre: `${api.Nombre} Dashboard Pro`,
        descripcion: `Dashboard en tiempo real usando ${api.Descripci√≥n}`,
        categoria: api.Categor√≠a,
        precio_sugerido: api.Categor√≠a === 'Finance' ? 49.99 : 
                        api.Categor√≠a === 'Cryptocurrency' ? 39.99 : 
                        api.Categor√≠a === 'Health' ? 29.99 : 19.99,
        api_source: api.URL,
        valor_agregado: this.generarValorAgregado(api.Categor√≠a),
        tiempo_desarrollo: '2-4 horas',
        potencial_viral: this.calcularPotencialViral(api.Categor√≠a)
      };
      
      artefactos.push(artefacto);
    }

    return artefactos;
  }

  private generarValorAgregado(categoria: string): string[] {
    const valores: { [key: string]: string[] } = {
      'Finance': ['Alertas en tiempo real', 'An√°lisis predictivo', 'Portfolio tracking'],
      'Cryptocurrency': ['Alertas de precio', 'Trading signals', 'Market analysis'],
      'News': ['Filtrado inteligente', 'An√°lisis de sentimiento', 'Trending topics'],
      'Weather': ['Alertas clim√°ticas', 'Predicciones agr√≠colas', 'Turismo inteligente'],
      'Health': ['Monitoreo de epidemias', 'An√°lisis de tendencias', 'Alertas sanitarias']
    };
    
    return valores[categoria] || ['Dashboard personalizado', 'API integration', 'Real-time data'];
  }

  private calcularPotencialViral(categoria: string): number {
    const scores: { [key: string]: number } = {
      'Finance': 9,
      'Cryptocurrency': 10,
      'News': 8,
      'Weather': 7,
      'Health': 9
    };
    
    return scores[categoria] || 6;
  }

  // üîÑ Bucle aut√≥nomo cada 12 horas
  iniciarHuntingAutonomo(): void {
    if (this.huntingActive) {
      console.log('üîç API Hunter ya est√° activo');
      return;
    }

    this.huntingActive = true;
    console.log('üöÄ ATLAS API Hunter: Modo aut√≥nomo activado');

    // Ejecutar inmediatamente
    this.descubrirApis();

    // Repetir cada 12 horas (43200000 ms)
    setInterval(async () => {
      await this.descubrirApis();
    }, 43200000);
  }

  // üìä Estad√≠sticas del hunting
  getHuntingStats(): any {
    return {
      hunting_active: this.huntingActive,
      last_hunt: this.lastHunt.toISOString(),
      total_apis_discovered: this.discoveredApis.length,
      apis_by_category: this.getApisByCategory(),
      working_apis: this.discoveredApis.filter(api => api.Testeable).length,
      viral_apis_ready: this.seleccionarApisMasVirales().length,
      next_hunt: this.huntingActive ? 
        new Date(this.lastHunt.getTime() + 43200000).toISOString() : 
        'No programado'
    };
  }

  private getApisByCategory(): { [key: string]: number } {
    const categories: { [key: string]: number } = {};
    this.discoveredApis.forEach(api => {
      categories[api.Categor√≠a] = (categories[api.Categor√≠a] || 0) + 1;
    });
    return categories;
  }

  // üéØ Obtener APIs por categor√≠a espec√≠fica
  getApisPorCategoria(categoria: string): ApiUtil[] {
    return this.discoveredApis.filter(api => 
      api.Categor√≠a.toLowerCase() === categoria.toLowerCase() && api.Testeable
    );
  }

  // üìÇ Cargar APIs guardadas desde archivo
  cargarApisGuardadas(): boolean {
    try {
      if (fs.existsSync('atlas_apis.json')) {
        const data = JSON.parse(fs.readFileSync('atlas_apis.json', 'utf8'));
        this.discoveredApis = data.apis || [];
        this.lastHunt = new Date(data.timestamp || new Date());
        console.log(`üìÇ ${this.discoveredApis.length} APIs cargadas desde archivo`);
        return true;
      }
    } catch (error) {
      console.log('‚ùå Error cargando APIs guardadas');
    }
    return false;
  }
}

export const atlasApiHunter = AtlasApiHunter.getInstance();